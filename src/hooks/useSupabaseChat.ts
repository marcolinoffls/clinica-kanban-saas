import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useClinicaData } from './useClinicaData';
import { useAuthUser } from './useAuthUser';
import { toast } from 'sonner';

/**
 * üí¨ Hook para Gerenciamento de Chat com Integra√ß√£o Supabase
 * 
 * üìã FUNCIONALIDADES PRINCIPAIS:
 * - Busca e carrega mensagens de leads espec√≠ficos
 * - Envia mensagens (texto, imagem, √°udio, etc.)
 * - Gerencia contadores de mensagens n√£o lidas
 * - Carrega respostas prontas da cl√≠nica
 * - Marca mensagens como lidas automaticamente
 * 
 * üîí SEGURAN√áA:
 * - Valida√ß√£o de cl√≠nica_id em todas as opera√ß√µes
 * - Fallbacks para m√∫ltiplas fontes de clinica_id
 * - Tratamento robusto de erros
 * - Verifica√ß√£o de autentica√ß√£o antes de opera√ß√µes
 * 
 * ‚ö° PERFORMANCE:
 * - useCallback em todas as fun√ß√µes para evitar re-renders
 * - Estados memoizados e otimizados
 * - Execu√ß√£o √∫nica da inicializa√ß√£o
 * - Cleanup adequado de recursos
 * 
 * üîÑ DEPEND√äNCIAS:
 * - useAuthUser: Dados do usu√°rio autenticado
 * - useClinicaData: Dados da cl√≠nica atual
 * - Supabase: Cliente para opera√ß√µes de banco
 */
export const useSupabaseChat = () => {
  
  // üîó HOOKS PARA DADOS ESSENCIAIS
  const { user, userProfile, loading: authLoading, isAuthenticated } = useAuthUser();
  const { clinicaId, loading: clinicaDataLoading, error: clinicaDataError } = useClinicaData();

  // üìä ESTADOS LOCAIS DO CHAT
  const [mensagens, setMensagens] = useState<any[]>([]);                      // Mensagens carregadas
  const [respostasProntas, setRespostasProntas] = useState<any[]>([]);        // Templates de resposta
  const [mensagensNaoLidas, setMensagensNaoLidas] = useState<Record<string, number>>({}); // Contadores

  /**
   * ‚úÖ Indicador de Prontid√£o dos Dados
   * 
   * Determina se todos os dados necess√°rios est√£o dispon√≠veis
   * para executar opera√ß√µes de chat com seguran√ßa.
   * 
   * Condi√ß√µes necess√°rias:
   * - Autentica√ß√£o n√£o est√° carregando
   * - Usu√°rio est√° autenticado
   * - Perfil do usu√°rio foi carregado
   * - Dados da cl√≠nica n√£o est√£o carregando
   * - N√£o h√° erro nos dados da cl√≠nica
   * - ID da cl√≠nica est√° dispon√≠vel
   */
  const isChatDataReady = !authLoading && 
                          isAuthenticated && 
                          !!userProfile && 
                          !clinicaDataLoading && 
                          !clinicaDataError && 
                          !!clinicaId;

  /**
   * üîê Obter ID da Cl√≠nica de Forma Segura
   * 
   * Tenta obter o clinica_id de m√∫ltiplas fontes como fallback:
   * 1. clinica_id do contexto atual (mais confi√°vel)
   * 2. clinica_id do perfil do usu√°rio
   * 3. clinica_id buscado do lead espec√≠fico (√∫ltimo recurso)
   * 
   * @param {string} [leadId] - ID do lead para busca espec√≠fica
   * @returns {string|null} - ID da cl√≠nica ou null se n√£o encontrado
   */
  const obterClinicaIdSeguro = useCallback(async (leadId?: string): Promise<string | null> => {
    try {
      // üéØ PRIMEIRA TENTATIVA: Usar clinica_id do contexto
      if (clinicaId) {
        return clinicaId;
      }

      // üéØ SEGUNDA TENTATIVA: Usar clinica_id do perfil do usu√°rio
      if (userProfile?.clinica_id) {
        return userProfile.clinica_id;
      }

      // üéØ TERCEIRA TENTATIVA: Buscar do lead espec√≠fico
      if (leadId) {
        const { data: leadData, error } = await supabase
          .from('leads')
          .select('clinica_id')
          .eq('id', leadId)
          .single();

        // Retornar apenas se n√£o houver erro e dado existir
        if (!error && leadData?.clinica_id) {
          return leadData.clinica_id;
        }
      }

      // üö´ N√£o foi poss√≠vel obter clinica_id
      return null;
    } catch (error) {
      // Em caso de exce√ß√£o, falhar silenciosamente
      return null;
    }
  }, [clinicaId, userProfile?.clinica_id]);

  /**
   * üîî Buscar Mensagens N√£o Lidas
   * 
   * Carrega contadores de mensagens n√£o lidas agrupadas por lead.
   * Considera apenas mensagens:
   * - Da cl√≠nica atual
   * - N√£o marcadas como lidas (lida = false)
   * - Enviadas pelo lead (n√£o pelo usu√°rio)
   * 
   * Atualiza o estado mensagensNaoLidas com contadores por lead.
   */
  const buscarMensagensNaoLidas = useCallback(async () => {
    // ‚úÖ Verificar se dados est√£o prontos
    if (!isChatDataReady || !clinicaId) return;
    
    try {
      // üìä BUSCAR MENSAGENS N√ÉO LIDAS
      const { data, error } = await supabase
        .from('chat_mensagens')
        .select('lead_id')                    // S√≥ precisamos do lead_id para contar
        .eq('clinica_id', clinicaId)          // Filtrar por cl√≠nica
        .eq('lida', false)                    // Apenas n√£o lidas
        .eq('enviado_por', 'lead');           // Apenas do lead (n√£o do usu√°rio)

      if (error) throw error;

      // üßÆ CALCULAR CONTADORES POR LEAD
      const contadores: Record<string, number> = {};
      data?.forEach((msg) => {
        contadores[msg.lead_id] = (contadores[msg.lead_id] || 0) + 1;
      });

      // üíæ ATUALIZAR ESTADO
      setMensagensNaoLidas(contadores);
    } catch (error) {
      // Falha silenciosa para n√£o gerar logs excessivos
    }
  }, [isChatDataReady, clinicaId]);

  /**
   * ‚úÖ Marcar Mensagens como Lidas
   * 
   * Marca todas as mensagens n√£o lidas de um lead espec√≠fico como lidas.
   * Usado quando usu√°rio abre uma conversa ou visualiza mensagens.
   * 
   * @param {string} leadId - ID do lead cujas mensagens devem ser marcadas
   */
  const marcarMensagensComoLidas = useCallback(async (leadId: string) => {
    // üîê Obter clinica_id seguro
    const clinicaIdSeguro = await obterClinicaIdSeguro(leadId);
    if (!clinicaIdSeguro) return;
    
    try {
      // ‚úÖ ATUALIZAR MENSAGENS NO BANCO
      const { error } = await supabase
        .from('chat_mensagens')
        .update({ lida: true })               // Marcar como lida
        .eq('lead_id', leadId)                // Do lead espec√≠fico
        .eq('clinica_id', clinicaIdSeguro)    // Da cl√≠nica correta
        .eq('enviado_por', 'lead')            // Apenas mensagens do lead
        .eq('lida', false);                   // Que ainda n√£o foram lidas

      if (!error) {
        // üóëÔ∏è REMOVER CONTADOR LOCAL
        setMensagensNaoLidas(prev => {
          const updated = { ...prev };
          delete updated[leadId];             // Remover entrada do lead
          return updated;
        });
      }
    } catch (error) {
      // Falha silenciosa
    }
  }, [obterClinicaIdSeguro]);

  /**
   * üì® Buscar Mensagens de um Lead Espec√≠fico
   * 
   * Carrega hist√≥rico completo de mensagens de uma conversa.
   * Retorna mensagens ordenadas cronologicamente (mais antigas primeiro).
   * 
   * @param {string} leadId - ID do lead
   * @returns {Array} - Array de mensagens ou array vazio
   */
  const buscarMensagensLead = useCallback(async (leadId: string) => {
    // üîê Obter clinica_id seguro
    const clinicaIdSeguro = await obterClinicaIdSeguro(leadId);
    if (!clinicaIdSeguro) return [];
    
    try {
      // üìä BUSCAR MENSAGENS DO LEAD
      const { data, error } = await supabase
        .from('chat_mensagens')
        .select('*')                          // Todos os campos
        .eq('lead_id', leadId)                // Do lead espec√≠fico
        .eq('clinica_id', clinicaIdSeguro)    // Da cl√≠nica correta
        .order('created_at', { ascending: true }); // Ordem cronol√≥gica

      if (error) throw error;
      return data || [];
    } catch (error) {
      // Em caso de erro, retornar array vazio
      return [];
    }
  }, [obterClinicaIdSeguro]);

  /**
   * ‚úâÔ∏è Enviar Mensagem
   * 
   * Envia nova mensagem para um lead espec√≠fico.
   * Suporta diferentes tipos de m√≠dia e anexos.
   * 
   * @param {string} leadId - ID do lead destinat√°rio
   * @param {string} conteudo - Conte√∫do da mensagem
   * @param {string} [tipo='texto'] - Tipo da mensagem (texto, imagem, audio, etc.)
   * @param {string} [anexoUrl] - URL do anexo (opcional)
   * @returns {Object} - Dados da mensagem criada
   * @throws {Error} - Lan√ßa erro se n√£o conseguir enviar
   */
  const enviarMensagem = useCallback(async (
    leadId: string, 
    conteudo: string, 
    tipo: string = 'texto',
    anexoUrl?: string | null
  ) => {
    // üîê Obter clinica_id seguro
    const clinicaIdSeguro = await obterClinicaIdSeguro(leadId);
    if (!clinicaIdSeguro) {
      toast.error('N√£o foi poss√≠vel enviar a mensagem.');
      throw new Error('Cl√≠nica n√£o encontrada');
    }

    try {
      // üîß NORMALIZAR TIPO DE MENSAGEM
      const tipoCorrigido = tipo === 'text' ? 'texto' : tipo;

      // üìù PREPARAR DADOS DA MENSAGEM
      const mensagemData: any = {
        lead_id: leadId,
        clinica_id: clinicaIdSeguro,
        conteudo: conteudo.trim(),            // Remover espa√ßos extras
        enviado_por: 'usuario',               // Identificar como enviada pelo usu√°rio
        tipo: tipoCorrigido,
        lida: false                           // Mensagem n√£o lida inicialmente
      };

      // üìé ADICIONAR ANEXO SE FORNECIDO
      if (anexoUrl) {
        mensagemData.anexo_url = anexoUrl;
      }

      // üíæ INSERIR NO BANCO DE DADOS
      const { data, error } = await supabase
        .from('chat_mensagens')
        .insert(mensagemData)
        .select()                             // Retornar dados inseridos
        .single();                            // Esperar um √∫nico registro

      if (error) throw error;
      return data;
    } catch (error) {
      // üö® NOTIFICAR USU√ÅRIO E PROPAGAR ERRO
      toast.error('Erro ao enviar mensagem.');
      throw error;
    }
  }, [obterClinicaIdSeguro]);

  /**
   * üìã Buscar Respostas Prontas
   * 
   * Carrega templates de respostas r√°pidas configuradas para a cl√≠nica.
   * Facilita respostas padronizadas e aumenta produtividade.
   */
  const buscarRespostasProntas = useCallback(async () => {
    // ‚úÖ Verificar se dados est√£o prontos
    if (!isChatDataReady || !clinicaId) return;
    
    try {
      // üìä BUSCAR RESPOSTAS ATIVAS
      const { data, error } = await supabase
        .from('respostas_prontas')
        .select('*')                          // Todos os campos
        .eq('clinica_id', clinicaId)          // Da cl√≠nica atual
        .eq('ativo', true)                    // Apenas ativas
        .order('titulo');                     // Ordenar por t√≠tulo

      if (!error) {
        // üíæ ATUALIZAR ESTADO
        setRespostasProntas(data || []);
      }
    } catch (error) {
      // Falha silenciosa
    }
  }, [isChatDataReady, clinicaId]);

  /**
   * üîÑ useEffect: Inicializa√ß√£o do Chat
   * 
   * Executa uma √∫nica vez quando todos os dados est√£o prontos.
   * Carrega dados iniciais necess√°rios para o funcionamento do chat.
   * 
   * ‚ö° OTIMIZA√á√ïES:
   * - Flag isMounted previne atualiza√ß√µes em componente desmontado
   * - Execu√ß√£o paralela de opera√ß√µes independentes
   * - Cleanup adequado na desmontagem
   */
  useEffect(() => {
    let isMounted = true;  // Flag para prevenir memory leaks

    const initializeChat = async () => {
      // ‚úÖ S√≥ executar se dados est√£o prontos
      if (!isChatDataReady) return;
      
      if (isMounted) {
        // üöÄ EXECUTAR INICIALIZA√á√ÉO PARALELA
        await Promise.all([
          buscarMensagensNaoLidas(),          // Carregar contadores
          buscarRespostasProntas()            // Carregar templates
        ]);
      }
    };

    initializeChat();

    // üßπ CLEANUP FUNCTION
    return () => {
      isMounted = false;  // Prevenir atualiza√ß√µes ap√≥s desmontagem
    };
  }, [isChatDataReady, buscarMensagensNaoLidas, buscarRespostasProntas]);

  // üì§ INTERFACE P√öBLICA DO HOOK
  return {
    // üìä DADOS DO CHAT
    mensagens,                              // Mensagens carregadas
    respostasProntas,                       // Templates de resposta
    mensagensNaoLidas,                      // Contadores por lead
    setMensagensNaoLidas,                   // Setter para contadores (usado pelo Realtime)
    
    // üîß FUN√á√ïES PRINCIPAIS
    buscarMensagensNaoLidas,                // Recarregar contadores
    marcarMensagensComoLidas,               // Marcar como lidas
    buscarMensagensLead,                    // Carregar conversa
    enviarMensagem,                         // Enviar nova mensagem
    buscarRespostasProntas,                 // Recarregar templates
    
    // ‚úÖ ESTADO DE PRONTID√ÉO
    isChatDataReady,                        // Se pode executar opera√ß√µes
    
    // üìä INFORMA√á√ïES ADICIONAIS (para debug/monitoramento)
    authLoading,                            // Loading da autentica√ß√£o
    isAuthenticated,                        // Status de autentica√ß√£o
    userProfile,                            // Dados do perfil
    clinicaDataLoading,                     // Loading dos dados da cl√≠nica
    clinicaDataError,                       // Erro nos dados da cl√≠nica
    clinicaId                               // ID da cl√≠nica atual
  };
};