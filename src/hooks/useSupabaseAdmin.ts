/**
 * =================================================================
 * HOOK: useSupabaseAdmin
 * =================================================================
 * 
 * DESCRI√á√ÉO:
 * Hook centralizado para opera√ß√µes administrativas no Supabase.
 * Fornece funcionalidades exclusivas para usu√°rios com privil√©gios
 * de administrador, incluindo acesso a dados de todas as cl√≠nicas.
 * 
 * FUNCIONALIDADES:
 * - Verifica√ß√£o de permiss√µes de administrador
 * - Busca e manipula√ß√£o de dados de cl√≠nicas
 * - Estat√≠sticas e m√©tricas administrativas
 * - Opera√ß√µes CRUD em recursos multi-tenant
 * - ‚úÖ NOVA: Gerenciamento de an√∫ncios personalizados
 * 
 * SEGURAN√áA:
 * - Utiliza pol√≠ticas RLS espec√≠ficas para administradores
 * - Verifica√ß√£o de permiss√µes em cada opera√ß√£o
 * - Logs detalhados para auditoria
 */

import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useSupabaseAdmin = () => {
  // Estados para controle de admin
  const [isAdmin, setIsAdmin] = useState(false);
  const [adminCheckLoading, setAdminCheckLoading] = useState(true);
  const { toast } = useToast();

  // ===============================
  // VERIFICA√á√ÉO DE PERMISS√ïES ADMIN
  // ===============================
  useEffect(() => {
    const verificarPermissaoAdmin = async () => {
      try {
        setAdminCheckLoading(true);
        console.log('üîê [useSupabaseAdmin] Verificando permiss√µes de administrador...');
        
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
          console.log('‚ùå [useSupabaseAdmin] Usu√°rio n√£o autenticado');
          setIsAdmin(false);
          return;
        }
        
        const { data, error } = await supabase
          .from('user_profiles')
          .select('profile_type')
          .eq('user_id', user.id)
          .single();

        if (error) {
          console.error('‚ùå [useSupabaseAdmin] Erro ao verificar perfil:', error);
          setIsAdmin(false);
          return;
        }

        const isAdminUser = data?.profile_type === 'admin';
        setIsAdmin(isAdminUser);
        console.log(`‚úÖ [useSupabaseAdmin] Status admin: ${isAdminUser}`);
        
      } catch (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro na verifica√ß√£o:', error);
        setIsAdmin(false);
      } finally {
        setAdminCheckLoading(false);
      }
    };

    verificarPermissaoAdmin();
  }, []);

  // ===============================
  // BUSCAR TODAS AS CL√çNICAS
  // ===============================
  const buscarTodasClinicas = async () => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üè• [useSupabaseAdmin] Buscando todas as cl√≠nicas...');

      const { data, error } = await supabase
        .from('clinicas')
        .select('*')
        .order('nome', { ascending: true });

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao buscar cl√≠nicas:', error);
        throw new Error(error.message || 'Erro ao buscar cl√≠nicas');
      }

      console.log('‚úÖ [useSupabaseAdmin] Cl√≠nicas carregadas:', data.length);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na busca de cl√≠nicas:', error);
      throw error;
    }
  };

  // ===============================
  // BUSCAR CL√çNICA POR ID
  // ===============================
  const buscarClinicaPorId = async (clinicaId: string) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üè• [useSupabaseAdmin] Buscando cl√≠nica por ID:', clinicaId);

      const { data, error } = await supabase
        .from('clinicas')
        .select('*')
        .eq('id', clinicaId)
        .single();

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao buscar cl√≠nica:', error);
        throw new Error(error.message || 'Erro ao buscar cl√≠nica');
      }

      console.log('‚úÖ [useSupabaseAdmin] Cl√≠nica carregada:', data.nome);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na busca de cl√≠nica:', error);
      throw error;
    }
  };

  // ===============================
  // BUSCAR ESTAT√çSTICAS DE LEADS DA CL√çNICA
  // ===============================
  const buscarEstatisticasDeLeadsDaClinica = async (clinicaId: string) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üìä [useSupabaseAdmin] Buscando estat√≠sticas de leads da cl√≠nica:', clinicaId);

      // Estat√≠sticas de leads por etapa
      const { data: leadsPorEtapa, error: errorLeadsPorEtapa } = await supabase
        .from('leads')
        .select('etapa_kanban_id')
        .eq('clinica_id', clinicaId);

      if (errorLeadsPorEtapa) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao buscar leads por etapa:', errorLeadsPorEtapa);
        throw new Error(errorLeadsPorEtapa.message || 'Erro ao buscar leads por etapa');
      }

      // Total de leads
      const totalLeads = leadsPorEtapa.length;

      // Agrupar leads por etapa
      const leadsAgrupadosPorEtapa = leadsPorEtapa.reduce((acumulador: any, lead: any) => {
        const etapaId = lead.etapa_kanban_id;
        acumulador[etapaId] = (acumulador[etapaId] || 0) + 1;
        return acumulador;
      }, {});

      console.log('‚úÖ [useSupabaseAdmin] Estat√≠sticas carregadas:', { totalLeads, leadsAgrupadosPorEtapa });
      return { totalLeads, leadsAgrupadosPorEtapa };
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na busca de estat√≠sticas:', error);
      throw error;
    }
  };

  // ===============================
  // ATUALIZAR CONFIGURA√á√ÉO EVOLUTION
  // ===============================
  const atualizarConfiguracaoEvolution = async (
    clinicaId: string,
    instanceName?: string,
    apiKey?: string
  ) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üîß [useSupabaseAdmin] Atualizando configura√ß√£o Evolution para a cl√≠nica:', clinicaId);

      const updates: { evolution_instance_name?: string; evolution_api_key?: string } = {};
      if (instanceName !== undefined) {
        updates.evolution_instance_name = instanceName;
      }
      if (apiKey !== undefined) {
        updates.evolution_api_key = apiKey;
      }

      const { data, error } = await supabase
        .from('clinicas')
        .update(updates)
        .eq('id', clinicaId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao atualizar configura√ß√£o Evolution:', error);
        throw new Error(error.message || 'Erro ao atualizar configura√ß√£o Evolution');
      }

      console.log('‚úÖ [useSupabaseAdmin] Configura√ß√£o Evolution atualizada com sucesso:', data);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro ao atualizar configura√ß√£o Evolution:', error);
      throw error;
    }
  };

  // ===============================
  // ATUALIZAR CONFIGURA√á√ÉO WEBHOOK
  // ===============================
  const atualizarConfiguracaoWebhook = async (
    clinicaId: string,
    webhookType: string,
    webhookUrl?: string
  ) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üîß [useSupabaseAdmin] Atualizando configura√ß√£o de webhook para a cl√≠nica:', clinicaId);

      const updates: { webhook_type?: string; webhook_url?: string } = { webhook_type: webhookType };
      if (webhookUrl !== undefined) {
        updates.webhook_url = webhookUrl;
      }

      const { data, error } = await supabase
        .from('clinicas')
        .update(updates)
        .eq('id', clinicaId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao atualizar configura√ß√£o de webhook:', error);
        throw new Error(error.message || 'Erro ao atualizar configura√ß√£o de webhook');
      }

      console.log('‚úÖ [useSupabaseAdmin] Configura√ß√£o de webhook atualizada com sucesso:', data);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro ao atualizar configura√ß√£o de webhook:', error);
      throw error;
    }
  };

  // ===============================
  // ‚úÖ NOVA SE√á√ÉO: AN√öNCIOS PERSONALIZADOS
  // ===============================

  /**
   * Buscar todos os an√∫ncios personalizados de uma cl√≠nica espec√≠fica
   * Fun√ß√£o admin para visualizar configura√ß√µes de an√∫ncios de qualquer cl√≠nica
   */
  const buscarAnunciosPersonalizadosDaClinica = async (clinicaId: string) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üéØ [useSupabaseAdmin] Buscando an√∫ncios personalizados da cl√≠nica:', clinicaId);

      const { data, error } = await supabase
        .from('custom_ads')
        .select('*')
        .eq('clinica_id', clinicaId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao buscar an√∫ncios:', error);
        throw new Error(error.message || 'Erro ao buscar an√∫ncios personalizados');
      }

      console.log('‚úÖ [useSupabaseAdmin] An√∫ncios carregados:', data.length);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na busca de an√∫ncios:', error);
      throw error;
    }
  };

  /**
   * Criar an√∫ncio personalizado para uma cl√≠nica espec√≠fica (admin)
   */
  const criarAnuncioPersonalizadoParaClinica = async (clinicaId: string, anuncioData: {
    ad_name: string;
    ad_phrase: string;
    ad_source: string;
    active?: boolean;
  }) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('‚ûï [useSupabaseAdmin] Criando an√∫ncio personalizado para cl√≠nica:', clinicaId);

      const { data, error } = await supabase
        .from('custom_ads')
        .insert([{
          ...anuncioData,
          clinica_id: clinicaId,
          active: anuncioData.active ?? true
        }])
        .select()
        .single();

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao criar an√∫ncio:', error);
        throw new Error(error.message || 'Erro ao criar an√∫ncio personalizado');
      }

      console.log('‚úÖ [useSupabaseAdmin] An√∫ncio criado com sucesso:', data);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na cria√ß√£o de an√∫ncio:', error);
      throw error;
    }
  };

  /**
   * Atualizar an√∫ncio personalizado (admin)
   */
  const atualizarAnuncioPersonalizado = async (anuncioId: string, updateData: {
    ad_name?: string;
    ad_phrase?: string;
    ad_source?: string;
    active?: boolean;
  }) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('‚úèÔ∏è [useSupabaseAdmin] Atualizando an√∫ncio personalizado:', anuncioId);

      const { data, error } = await supabase
        .from('custom_ads')
        .update(updateData)
        .eq('id', anuncioId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao atualizar an√∫ncio:', error);
        throw new Error(error.message || 'Erro ao atualizar an√∫ncio personalizado');
      }

      console.log('‚úÖ [useSupabaseAdmin] An√∫ncio atualizado com sucesso:', data);
      return data;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na atualiza√ß√£o de an√∫ncio:', error);
      throw error;
    }
  };

  /**
   * Deletar an√∫ncio personalizado (admin)
   */
  const deletarAnuncioPersonalizado = async (anuncioId: string) => {
    if (!isAdmin) {
      throw new Error('Acesso negado: usu√°rio n√£o √© administrador');
    }

    try {
      console.log('üóëÔ∏è [useSupabaseAdmin] Deletando an√∫ncio personalizado:', anuncioId);

      const { error } = await supabase
        .from('custom_ads')
        .delete()
        .eq('id', anuncioId);

      if (error) {
        console.error('‚ùå [useSupabaseAdmin] Erro ao deletar an√∫ncio:', error);
        throw new Error(error.message || 'Erro ao deletar an√∫ncio personalizado');
      }

      console.log('‚úÖ [useSupabaseAdmin] An√∫ncio deletado com sucesso');
      return true;
    } catch (error) {
      console.error('‚ùå [useSupabaseAdmin] Erro na exclus√£o de an√∫ncio:', error);
      throw error;
    }
  };

  return {
    // Estados de verifica√ß√£o admin
    isAdmin,
    adminCheckLoading,
    
    // Fun√ß√µes de busca
    buscarTodasClinicas,
    buscarClinicaPorId,
    buscarEstatisticasDeLeadsDaClinica,

    // Fun√ß√µes de atualiza√ß√£o de configura√ß√£o
    atualizarConfiguracaoEvolution,
    atualizarConfiguracaoWebhook,
    
    // ‚úÖ NOVAS FUN√á√ïES: An√∫ncios Personalizados
    buscarAnunciosPersonalizadosDaClinica,
    criarAnuncioPersonalizadoParaClinica,
    atualizarAnuncioPersonalizado,
    deletarAnuncioPersonalizado,
  };
};
