/**
 * Componente de janela de chat com atualiza√ß√£o em tempo real
 * 
 * Este componente:
 * - Exibe mensagens de uma conversa espec√≠fica
 * - Atualiza automaticamente via Supabase Realtime
 * - Diferencia mensagens enviadas e recebidas
 * - Gerencia inscri√ß√µes de tempo real sem vazamentos de mem√≥ria
 * - Controla rolagem autom√°tica para as mensagens mais recentes
 * - Posiciona inicialmente no final da conversa para evitar efeito de rolagem
 * - Rola automaticamente apenas se o usu√°rio estiver pr√≥ximo do final
 * 
 * Props:
 * - leadId: ID do lead para filtrar mensagens
 */

// src/components/chat/ChatWindow.tsx

import { useState, useEffect, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
// Removida a importa√ß√£o do useClinicaFixa, pois usaremos o clinicaId din√¢mico
import { useClinicaData } from '@/hooks/useClinicaData'; // Importa o hook para obter dados da cl√≠nica dinamicamente

// Interface para definir a estrutura de um objeto de mensagem
interface Mensagem {
  id: string; // ID √∫nico da mensagem
  lead_id: string; // ID do lead a quem a mensagem pertence
  clinica_id: string; // ID da cl√≠nica a qual a mensagem e o lead pertencem
  conteudo: string; // O texto da mensagem
  tipo: string; // Tipo da mensagem (ex: 'texto', 'imagem')
  enviado_por: 'lead' | 'usuario'; // Quem enviou a mensagem: 'lead' ou 'usuario' (do CRM)
  lida: boolean; // Status de leitura da mensagem
  created_at: string; // Timestamp de quando a mensagem foi criada
}

// Interface para as props do componente ChatWindow
interface ChatWindowProps {
  leadId: string; // ID do lead para o qual a janela de chat ser√° exibida
}

export const ChatWindow = ({ leadId }: ChatWindowProps) => {
  // Hook para obter o clinicaId din√¢mico, o estado de carregamento e poss√≠veis erros
  const { clinicaId, loading: clinicaDataLoading, error: clinicaDataError } = useClinicaData(); //

  // Estado para armazenar a lista de mensagens da conversa atual
  const [mensagens, setMensagens] = useState<Mensagem[]>([]);
  // Estado para controlar o carregamento das mensagens
  const [carregando, setCarregando] = useState(true);
  // Estado para armazenar mensagens de erro
  const [erro, setErro] = useState<string | null>(null);
  // Estado para controlar se a primeira carga de mensagens foi conclu√≠da (para otimizar a rolagem)
  const [primeiraCarregaCompleta, setPrimeiraCarregaCompleta] = useState(false);
  // Ref para o elemento final da lista de mensagens, usado para rolar automaticamente
  const messagesEndRef = useRef<HTMLDivElement>(null);
  // Ref para o container das mensagens, usado para controlar a rolagem
  const containerRef = useRef<HTMLDivElement>(null);

  // Fun√ß√£o para rolar a visualiza√ß√£o para a mensagem mais recente
  const rolarParaFinal = (comportamento: ScrollBehavior = 'smooth') => {
    messagesEndRef.current?.scrollIntoView({ behavior: comportamento });
  };

  // Fun√ß√£o para posicionar a visualiza√ß√£o imediatamente no final do chat (usado na carga inicial)
  const posicionarNoFinal = () => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  };

  // Fun√ß√£o para verificar se o usu√°rio est√° visualizando as mensagens mais recentes
  // Retorna true se a rolagem estiver a menos de 100px do final.
  const estaProximoDoFinal = () => {
    if (!containerRef.current) return true;
    
    const { scrollTop, scrollHeight, clientHeight } = containerRef.current;
    return scrollHeight - scrollTop - clientHeight < 100;
  };

  // Fun√ß√£o ass√≠ncrona para carregar o hist√≥rico inicial de mensagens do lead
  const carregarMensagens = async () => {
    // Verifica se o clinicaId est√° dispon√≠vel antes de prosseguir
    if (!clinicaId) {
      setCarregando(false);
      setErro('ID da cl√≠nica n√£o dispon√≠vel para carregar mensagens.');
      console.warn('[ChatWindow] Tentativa de carregar mensagens sem clinicaId.');
      return;
    }
    try {
      console.log('üì• Carregando mensagens para lead:', leadId, 'cl√≠nica:', clinicaId);
      setCarregando(true); // Define o estado de carregamento como true
      setErro(null); // Limpa erros anteriores
      
      // Busca as mensagens no Supabase, filtrando por leadId e clinicaId, ordenando por data de cria√ß√£o
      const { data, error: dbError } = await supabase
        .from('chat_mensagens')
        .select('*')
        .eq('lead_id', leadId)
        .eq('clinica_id', clinicaId) // Adiciona filtro por clinicaId din√¢mico
        .order('created_at', { ascending: true });

      if (dbError) {
        console.error('‚ùå Erro ao carregar mensagens:', dbError);
        setErro('Erro ao carregar mensagens');
        return;
      }

      // Formata as mensagens recebidas para garantir a tipagem correta de 'enviado_por'
      const mensagensFormatadas = (data || []).map(msg => ({
        ...msg,
        enviado_por: msg.enviado_por === 'lead' ? 'lead' as const : 'usuario' as const
      }));

      setMensagens(mensagensFormatadas); // Atualiza o estado com as mensagens carregadas
      console.log('‚úÖ Mensagens carregadas:', mensagensFormatadas?.length || 0);
      
      // Ap√≥s a primeira carga, posiciona a visualiza√ß√£o no final das mensagens
      // requestAnimationFrame garante que o DOM foi atualizado antes da rolagem
      requestAnimationFrame(() => {
        posicionarNoFinal();
        setPrimeiraCarregaCompleta(true); // Marca que a primeira carga foi conclu√≠da
      });
      
    } catch (errorCatch) {
      console.error('‚ùå Erro ao carregar mensagens (catch):', errorCatch);
      setErro('Erro ao carregar mensagens');
    } finally {
      setCarregando(false); // Define o estado de carregamento como false ao final
    }
  };

  // useEffect para configurar o Supabase Realtime e carregar as mensagens iniciais
  useEffect(() => {
    // Se os dados da cl√≠nica ainda est√£o carregando, aguarda
    if (clinicaDataLoading) {
      console.log('[ChatWindow] Aguardando clinicaId...');
      setCarregando(true);
      return;
    }

    // Se houve erro ao carregar dados da cl√≠nica ou o clinicaId n√£o est√° dispon√≠vel, exibe erro
    if (clinicaDataError || !clinicaId) {
      console.error('[ChatWindow] Erro ao obter clinicaId ou clinicaId n√£o dispon√≠vel:', clinicaDataError, clinicaId);
      setErro(clinicaDataError?.message || 'ID da cl√≠nica n√£o encontrado para iniciar o chat.');
      setCarregando(false);
      setMensagens([]); // Limpa as mensagens se n√£o for poss√≠vel carregar
      return;
    }
    
    // Prossegue se clinicaId estiver dispon√≠vel e sem erros
    console.log('üîÑ Configurando chat em tempo real para lead:', leadId, 'na clinica:', clinicaId);
    
    setPrimeiraCarregaCompleta(false); // Reseta o estado da primeira carga ao mudar de lead/clinica
    carregarMensagens(); // Carrega as mensagens iniciais

    // Cria um canal de comunica√ß√£o Realtime espec√≠fico para este lead e cl√≠nica
    const canalChat = supabase
      .channel(`chat-mensagens-lead-${leadId}-clinica-${clinicaId}`) // Nome do canal mais espec√≠fico
      .on(
        'postgres_changes', // Escuta por mudan√ßas no banco de dados
        {
          event: 'INSERT', // Especificamente para novas inser√ß√µes
          schema: 'public', // No schema p√∫blico
          table: 'chat_mensagens', // Na tabela chat_mensagens
          filter: `lead_id=eq.${leadId}` // Filtra eventos apenas para o leadId atual
        },
        (payload) => { // Callback executado quando um novo evento √© recebido
          console.log('üì® Nova mensagem recebida via Realtime:', payload.new);
          
          const novaMensagem = payload.new as any; // Converte o payload para 'any' para acesso flex√≠vel
          
          // Filtro adicional no cliente: verifica se a mensagem pertence √† cl√≠nica correta
          if (novaMensagem.clinica_id === clinicaId) {
            // Formata a nova mensagem para garantir a tipagem correta
            const mensagemFormatada: Mensagem = {
              ...novaMensagem,
              enviado_por: novaMensagem.enviado_por === 'lead' ? 'lead' as const : 'usuario' as const
            };
            
            // Atualiza o estado de mensagens, adicionando a nova mensagem
            setMensagens(mensagensAtuais => {
              // Evita adicionar mensagens duplicadas (caso raro, mas como seguran√ßa)
              const jaExiste = mensagensAtuais.some(m => m.id === mensagemFormatada.id);
              if (jaExiste) {
                console.log('‚ö†Ô∏è Mensagem j√° existe, ignorando duplicata');
                return mensagensAtuais;
              }
              
              const novaLista = [...mensagensAtuais, mensagemFormatada];
              console.log('‚úÖ Mensagem adicionada ao estado, total:', novaLista.length);
              
              return novaLista; // Retorna a nova lista de mensagens
            });
          } else {
            // Loga se a mensagem foi ignorada por pertencer a outra cl√≠nica
            console.log('‚ö†Ô∏è Mensagem ignorada - cl√≠nica diferente. Esperado:', clinicaId, 'Recebido:', novaMensagem.clinica_id);
          }
        }
      )
      .subscribe((status, err) => { // Inicia a escuta do canal
        console.log('üîó Status da subscri√ß√£o Realtime:', status);
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ Subscri√ß√£o Realtime ativa para lead:', leadId, 'clinica:', clinicaId);
        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT' || status === 'CLOSED') {
          // Trata erros ou fechamento inesperado da conex√£o Realtime
          console.error('‚ùå Erro ou fechamento na subscri√ß√£o Realtime:', status, err);
          setErro(`Erro na conex√£o em tempo real: ${status}`);
        }
      });

    // Fun√ß√£o de limpeza: executada quando o componente √© desmontado ou as depend√™ncias mudam
    return () => {
      console.log('üßπ Removendo subscri√ß√£o Realtime para lead:', leadId, 'clinica:', clinicaId);
      supabase.removeChannel(canalChat).catch(err => console.error("Erro ao remover canal", err)); // Remove o canal para evitar vazamentos de mem√≥ria
    };
  // Array de depend√™ncias do useEffect: re-executa o efeito se qualquer um desses valores mudar
  }, [leadId, clinicaId, clinicaDataLoading, clinicaDataError]);


  // useEffect para rolar para o final quando novas mensagens s√£o adicionadas (ap√≥s a carga inicial)
  useEffect(() => {
    if (mensagens.length > 0 && primeiraCarregaCompleta) {
      const deveRolar = estaProximoDoFinal(); // Verifica se o usu√°rio est√° perto do final
      if (deveRolar) {
        // Adia a rolagem para garantir que o DOM foi atualizado
        requestAnimationFrame(() => {
          setTimeout(() => rolarParaFinal('smooth'), 50); // Rolagem suave
        });
      }
    }
  }, [mensagens, primeiraCarregaCompleta]); // Depende de 'mensagens' e 'primeiraCarregaCompleta'

  // Fun√ß√£o para formatar o timestamp da mensagem para exibi√ß√£o (HH:MM)
  const formatarHorario = (timestamp: string) => {
    const data = new Date(timestamp);
    return data.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  // Renderiza o estado de carregamento enquanto os dados da cl√≠nica ou mensagens est√£o sendo buscados
  if (clinicaDataLoading || (carregando && !primeiraCarregaCompleta)) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <span className="text-gray-500">Carregando mensagens...</span>
        </div>
      </div>
    );
  }

  // Renderiza o estado de erro, se houver
  if (erro) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 mb-2">‚ùå {erro}</p>
          <button 
            onClick={() => {
              setErro(null); // Limpa o erro
              setCarregando(true); // Ativa o carregamento para for√ßar a re-execu√ß√£o do useEffect
              // A fun√ß√£o carregarMensagens ser√° chamada novamente pelo useEffect quando clinicaId estiver pronto
            }}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
          >
            Tentar Novamente
          </button>
        </div>
      </div>
    );
  }

  // Renderiza√ß√£o principal da janela de chat
  return (
    <div className="h-full flex flex-col">
      {/* Container das mensagens com rolagem */}
      <div 
        ref={containerRef} // Ref para controlar a rolagem
        className="flex-1 overflow-y-auto p-4" // Permite rolagem vertical
      >
        <div className="space-y-2"> {/* Espa√ßamento entre as bolhas de mensagem */}
          {/* Se n√£o houver mensagens e n√£o estiver carregando, exibe mensagem informativa */}
          {mensagens.length === 0 && !carregando ? (
            <div className="text-center text-gray-500 py-8">
              <p>Nenhuma mensagem ainda.</p>
              <p className="text-sm">As novas mensagens aparecer√£o aqui automaticamente.</p>
            </div>
          ) : (
            // Mapeia e renderiza cada mensagem
            mensagens.map((mensagem) => (
              <div
                key={mensagem.id} // Chave √∫nica para cada mensagem
                className={`flex ${
                  // Alinha a mensagem √† direita se for do usu√°rio, √† esquerda se for do lead
                  mensagem.enviado_por === 'usuario' ? 'justify-end' : 'justify-start'
                }`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg shadow ${
                    // Estiliza√ß√£o diferente para mensagens do usu√°rio e do lead
                    mensagem.enviado_por === 'usuario'
                      ? 'bg-blue-600 text-white' // Mensagem do usu√°rio
                      : 'bg-white text-gray-900 border border-gray-200' // Mensagem do lead
                  }`}
                >
                  {/* Conte√∫do da mensagem */}
                  <p className="text-sm whitespace-pre-wrap">{mensagem.conteudo}</p>
                  
                  {/* Informa√ß√µes da mensagem (hor√°rio e tipo) */}
                  <div className="flex items-center justify-between mt-2">
                    <p
                      className={`text-xs ${
                        mensagem.enviado_por === 'usuario' 
                          ? 'text-blue-100' 
                          : 'text-gray-500'
                      }`}
                    >
                      {formatarHorario(mensagem.created_at)} {/* Exibe o hor√°rio formatado */}
                    </p>
                    
                    {/* Se a mensagem n√£o for do tipo 'texto', exibe um indicador do tipo */}
                    {mensagem.tipo !== 'texto' && (
                      <span
                        className={`text-xs px-2 py-1 rounded ${
                          mensagem.enviado_por === 'usuario'
                            ? 'bg-blue-500 text-blue-100'
                            : 'bg-gray-100 text-gray-600'
                        }`}
                      >
                        {mensagem.tipo}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
          {/* Elemento invis√≠vel no final da lista para ajudar na rolagem autom√°tica */}
          <div ref={messagesEndRef} />
        </div>
      </div>
    </div>
  );
};